<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[今日头条面试题]]></title>
    <url>%2F2017%2F08%2F16%2Fmianshi081%2F</url>
    <content type="text"><![CDATA[岗位：web开发-后台数据获取 1 bootstrap的特性；栅格布局和响应式布局的区别 2 写一个ajax的请求函数 3 当在网页中输入一个url之后，接下来会经过那些步骤？ 详细解释在服务器端发生的过程？ 当建立连接后，客户端资源请求是一个请求建立一个连接，还是一个连接可以请求多个资源？（一个连接只能请求一个资源） 4 tcp/ip是HTTP的协议么？TCP/IP 的三次握手原理？为什么要第三次握手，只有两次不可以么？ 5 单链表是什么，特性？单链表逆转，o(n)的时间复杂度。—-可使用倒插法，后面节点向前面插入 6 查找数组中 连续求和的最大值（动态规划） 7 ORM中使用Model，在controller里不直接使用sql语句的好处？ （1） 避免一些特殊的字符转义。如语句中自身存在的双引号。 （2）安全性问题。可以避免类似子查询导致的泄露问题。即在用户登录时，若用户名输入 sql的关键字如select， sql会在原有的select里理解为新的子查询、 8 数据库为什么使用索引可以加快搜索速度？ 9 Jquery是什么？]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue.js 学习入门]]></title>
    <url>%2F2017%2F08%2F16%2FThis-is-my-first-Post-0816%2F</url>
    <content type="text"><![CDATA[Vue.js 学习-入门声明式渲染将数据和DOM绑定，互相影响 （1）绑定DOM文本和数据 例： &lt;div id = &quot;app2&quot;&gt; &lt;span v-bind:title =&quot;message&quot;&gt;some code &lt;/span&gt; &lt;/div&gt; var app2 = new Vue({ el: &apos;#app2&apos;, data: { message: &quot;App2&quot; } }) 相互式影响体现在：当在js控制台输入app2.message=”app3”， 此时在id为app-2的部分的信息将展示为 “app3”。 v-bind : 将这个元素节点的title属性，同vue实例的message属性保持一致。 指令带有前缀 v- ，表示为vue提供的特殊属性。 js控制台在chrome中可由* ctrl+shift+j *打开。 （2）绑定DOM结构和数据 — &lt;div id=&quot;app-3&quot;&gt; &lt;p v-if=&quot;seen&quot;&gt;现在你看到我了&lt;/p&gt; &lt;/div&gt; var app3 = new Vue({ el: &apos;#app-3&apos;, data: {seen: true } }) 在控制台中输入app3.data=false, 这段文字将消失。 v-if : 绑定了一个判断的语句，如果seen为true，就显示，否则将不显示文字。 v-for : 可以绑定数组的数据来循环。 在vue中，js中对实例的改动可马上展现，这是由于vue自动应用过度效应。 用户输入 用 v-on 指令绑定一个事件监听器，调用在vue实例中的应用。 用v-model指令，实现表单状态和应用（展示）之间的双向绑定。 vue组件可以扩展 HTML 元素，封装可重用的代码，即组件可以是自定义元素，Vue.js 的编译器为它添加特殊功能。 在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。 学习内容摘自 vue.js)官网。]]></content>
      <categories>
        <category>前端学习</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>开发</tag>
        <tag>vue.js</tag>
      </tags>
  </entry>
</search>
